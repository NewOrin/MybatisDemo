<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 为这个mapper指定一个唯一的namespace，namespace的值习惯上设置成包名+sql映射文件名，这样就能够保证namespace的值是唯一的
例如namespace="me.gacl.mapping.userMapper"就是me.gacl.mapping(包名)+userMapper(userMapper.xml文件去除后缀)
 -->
<mapper namespace="UserMapper">
    <!--配置实体类与数据库表映射的关系-->
    <resultMap id="NewsResult" type="user">
        <id column="_ID" property="id"/>
        <result column="NAME" property="name"/>
        <result column="AGE" property="age"/>
    </resultMap>
    <!-- 用来定义可重用的SQL代码段 -->
    <sql id="user_params">
        _id,name,age
    </sql>

    <!-- 在select标签中编写查询的SQL语句， 设置select标签的id属性为getUser，id属性值必须是唯一的，不能够重复
    使用parameterType属性指明查询时使用的参数类型，resultType属性指明查询返回的结果集类型
    resultType="com.neworin.entity.User"就表示将查询结果封装成一个User类的对象返回
    User类就是users表所对应的实体类
    -->
    <!--
        根据id查询得到一个user对象
        id是接口名称
     -->
    <select id="findAll" resultType="com.neworin.entity.User">
        SELECT * FROM "user"
    </select>
    <select id="getUserById" parameterType="int"
            resultType="com.neworin.entity.User">
        SELECT * FROM user where _id=#{id}
    </select>
    <select id="getAllUser" resultType="com.neworin.entity.User">
        SELECT * FROM user
    </select>
    <insert id="insertUser" parameterType="com.neworin.entity.User">
        INSERT INTO user(<include refid="user_params"/>) VALUES(#{_id},#{name},#{age})
    </insert>
    <delete id="deleteUserById" parameterType="int">
        DELETE FROM user WHRER _id=#{id}
    </delete>
    <update id="updateUserById" parameterType="int">
        UPDATE USER SET name=#{name} WHERE _id=#{id}
    </update>
</mapper>